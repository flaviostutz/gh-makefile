on:
  workflow_call:
    inputs:
      working-directory:
        description: Work dir used during builds. Specify the relative path of the folder in repo that contains a Makefile
        required: true
        type: string
      environment:
        description: Github environment to attach this job to
        required: false
        type: string
      environment-url:
        description: Github environment url to associate to this environment run. Can be overritten if 'deploy' target returns a URL.
        required: false
        type: string
      artifact-path:
        description: Location of the folder or file to upload to workflow artifact
        required: false
        type: string
      artifact-retention:
        description: Number of days for retaining the generated artifact. Defaults to 3.
        default: 3
        required: false
        type: number
      tooling:
        description: Name of the build environment to setup. Must be one of 'node' or 'golang'
        required: false
        type: string
      tooling-version:
        description: Version of Node or Golang environment to setup
        type: string
        required: false
      tooling-cache:
        description: Type of tooling cache to use
        default: ''
        type: string
        required: false
      stage:
        description: Variable available as ${STAGE} in all Make calls
        required: false
        type: string
      target-build:
        description: Run target 'build'
        default: false
        required: false
        type: boolean
      target-lint:
        description: Run target 'lint'
        default: false
        required: false
        type: boolean
      target-test:
        description: Run target 'test'
        default: false
        required: false
        type: boolean
      target-test-integration:
        description: Run target 'test-integration'
        default: false
        required: false
        type: boolean
      target-test-unit:
        description: Run target 'test-unit'
        default: false
        required: false
        type: boolean
      target-package:
        description: Run target 'package'
        default: false
        required: false
        type: boolean
      target-deploy:
        description: Run target 'deploy'. AWS_* environments will be availabled during this run
        default: false
        required: false
        type: boolean
      target-undeploy:
        description: Run target 'undeploy'
        default: false
        required: false
        type: boolean
      target-get-environment-url:
        description: Run target 'get-environment-url'
        default: false
        required: false
        type: boolean
      git-base-head:
        description: Discover last successful git sha BASE and HEAD and expose it in variables NX_BASE AND NX_HEAD
        default: true
        required: false
        type: boolean
      AWS_DEFAULT_REGION:
        description: The AWS region to deploy resources to. Will be available as ENV during deploy and undeploy calls
        default: ''
        required: false
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        description: AWS Access Key ID. Will be available as ENV during deploy and undeploy calls
        required: false
      AWS_SECRET_ACCESS_KEY:
        description: AWS Secret Access Key. Will be available as ENV during deploy and undeploy calls
        required: false

jobs:
  make-ci:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    environment:
      name: ${{ inputs.environment }}
      url: ${{ steps.env-url.outputs.environment-url }}

    outputs:
      environment-url: ${{ steps.env-url.outputs.environment-url }}

    steps:
    - uses: actions/checkout@v3
      with:
        # required by nrwl/nx-set-shas@v3
        fetch-depth: 0

    - name: Validate inputs and secrets (${{ inputs.working-directory }}) ${{ inputs.stage }}
      run: |

        # CHECK MAKEFILE CONTENTS
        if [[ ! -f Makefile ]]; then
          echo "Makefile not found at ${{ inputs.working-directory }}"
          exit 1
        fi

        function checkTarget() {
          targetEnabled=$1
          targetName=$2
          if [ "$targetEnabled" == "true" ]; then
            set +e
            make -n $targetName
            if [ "$?" != "0" ]; then
              echo "Target '$targetName' not found in Makefile"
              exit 1
            fi
            set -e
          fi
        }

        checkTarget ${{ inputs.target-build }} build
        checkTarget ${{ inputs.target-lint }} lint
        checkTarget ${{ inputs.target-test }} test
        checkTarget ${{ inputs.target-test-unit }} test-unit
        checkTarget ${{ inputs.target-test-integration }} test-integration
        checkTarget ${{ inputs.target-package }} package
        checkTarget ${{ inputs.target-deploy }} deploy
        checkTarget ${{ inputs.target-undeploy }} undeploy

        # CHECK AWS KEYS WHEN DOING DEPLOY
        if [ "${{ inputs.target-deploy }}" == "true" || "${{ inputs.target-undeploy }}" == "true" ]; then
          if [ "${{ inputs.AWS_DEFAULT_REGION }}" == "" ]; then
            echo "'AWS_DEFAULT_REGION' workflow input is required when target-deploy=true or target-undeploy=true"
            exit 1
          fi

          if [ "${{ secrets.AWS_ACCESS_KEY_ID }}" == "" ]; then
            echo "'AWS_ACCESS_KEY_ID' workflow secret is required when target-deploy=true or target-undeploy=true"
            exit 1
          fi

          if [ "${{ secrets.AWS_SECRET_ACCESS_KEY }}" == "" ]; then
            echo "'AWS_SECRET_ACCESS_KEY' workflow secret is required when target-deploy=true or target-undeploy=true"
            exit 1
          fi
        fi

        # CHECK TOOLING CONFIGURATION
        if [ "${{ inputs.tooling }}" != "" ]; then
          if [ "${{ inputs.tooling }}" != "node" && "${{ inputs.tooling }}" != "golang" && "${{ inputs.tooling }}" != "golang+node" ]; then
            echo "'tooling' must be one of 'node', 'golang' or 'golang+node'"
            exit 1
          fi
        fi

        if [ "${{ inputs.tooling }}" == "node" ]; then
          if [ "${{ inputs.tooling-version }}" == "" ]; then
            echo "'tooling-version' must be set to the Node version to use. ex. '14', '18.9.1'"
            exit 1
          fi
        fi

        if [ "${{ inputs.tooling }}" == "golang" || "${{ inputs.tooling }}" == "golang+node" ]; then
          if [ "${{ inputs.tooling-version }}" == "" ]; then
            echo "'tooling-version' must be set to the Golang version to use. ex. '1.15', '1.16.x'"
            exit 1
          fi
        fi

    - uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.tooling-version }}
        cache: ${{ inputs.tooling-cache }}
      if: ${{ inputs.tooling == 'node' }}

    - uses: actions/setup-node@v4
      with:
        node-version: latest
      if: ${{ inputs.tooling == 'golang+node' }}

    - uses: actions/setup-go@v4
      with:
        go-version: ${{ inputs.tooling-version }}
      if: ${{ inputs.tooling == 'golang' || inputs.tooling == 'golang+node' }}

    - uses: nrwl/nx-set-shas@v3

    - name: make build
      run: STAGE=${{ inputs.stage }} make build
      if: ${{ inputs.target-build }}

    - name: make lint
      run: STAGE=${{ inputs.stage }} make lint
      if: ${{ inputs.target-lint }}

    - name: make test
      run: STAGE=${{ inputs.stage }} make test
      if: ${{ inputs.target-test }}

    - name: make test-unit
      run: STAGE=${{ inputs.stage }} make test-unit
      if: ${{ inputs.target-test-unit }}

    - name: make package
      run: STAGE=${{ inputs.stage }} make package
      if: ${{ inputs.target-package }}

    - name: upload generated artifacts
      uses: actions/upload-artifact@v3
      with:
        name: artifact-${{ inputs.stage }}
        path: ${{ inputs.working-directory }}/${{ inputs.artifact-path }}
        retention-days: ${{ inputs.artifact-retention }}
      if: ${{ inputs.artifact-path != '' }}
    
    - name: make deploy
      uses: mathiasvr/command-output@v1
      id: target-deploy
      with:
        run: |
          cd ${{ inputs.working-directory }}
          STAGE=${{ inputs.stage }} AWS_DEFAULT_REGION=${{ inputs.AWS_DEFAULT_REGION }} AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} make deploy
      if: ${{ inputs.target-deploy }}

    - name: resolve environment URL
      id: env-url
      env:
        DEPLOY_STDOUT: ${{ steps.target-deploy.outputs.stdout }}  
      run: |

        echo "If environment-url set as workflow input, use it"
        if [ "${{ inputs.environment-url }}" != "" ]; then
          echo "Setting environment-url from workflow input"
          echo url="${{ inputs.environment-url }}"
          echo "::set-output name=environment-url::${{ inputs.environment-url }}"
          exit 0
        else
          echo ">'environment-url' not set"
        fi

        echo "If make target get-environment-url returns an url, use it"
        set +e
        make -n get-environment-url
        R=$?
        set -e
        if [ "${{ inputs.target-get-environment-url }}" == "true" ] && [ "$R" == "0" ]; then
          echo "Target 'get-environment-url' exists"
          TARGET_ENV_URL=$(STAGE=${{ inputs.stage }} make get-environment-url -s)
          # search for a URL in target execution results
        	OUT_URL=$(echo ${TARGET_ENV_URL} | { grep -Eo "(http|https)://[a-zA-Z0-9./?=_%:-]*" || true; } | head -1)
          if [ "$OUT_URL" == "" ]; then
            echo "TARGET_ENV_URL=${TARGET_ENV_URL}"
            echo ">Target 'get-environment-url' should return an URL"
            exit 1
          fi
          echo "Setting environment-url from get-environment-url output"
          echo url="${OUT_URL}"
          echo "::set-output name=environment-url::${OUT_URL}"
          exit 0
        else
          echo ">Target 'get-environment-url' not found"
        fi

        echo "Try to get any URL from target deploy output"
        OUT_URL=$(echo $DEPLOY_STDOUT | { grep -Eo "(http|https)://[a-zA-Z0-9./?=_%:-]*" || true; } | head -1)
        if [ "$OUT_URL" != "" ]; then
          echo "Setting environment-url from target 'deploy' output"
          echo url=${OUT_URL}
          echo "::set-output name=environment-url::${OUT_URL}"
          exit 0
        else
          echo ">No URL found in deploy stdout contents"
        fi

        echo "No environment-url set"

    - name: make integration-tests
      run: |
        echo "ENVIRONMENT_URL=${{ steps.env-url.outputs.environment-url }}"
        STAGE=${{ inputs.stage }} ENVIRONMENT_URL="${{ steps.env-url.outputs.environment-url }}" make test-integration
      if: ${{ inputs.target-test-integration }}

    - name: make undeploy
      run: STAGE=${{ inputs.stage }} AWS_DEFAULT_REGION=${{ inputs.AWS_DEFAULT_REGION }} AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} make undeploy
      if: ${{ inputs.target-undeploy }}

